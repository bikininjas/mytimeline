events {
    worker_connections 1024;
}

http {
    # Upstream for Timeline App (simulating GCP Load Balancer)
    upstream timeline_app_gcp {
        server timeline-app-gcp:3000;
        # Simulate multiple instances
        # server timeline-app-gcp-2:3000;
    }

    # Rate limiting (similar to GCP Cloud Armor)
    limit_req_zone $binary_remote_addr zone=api:10m rate=100r/s;
    limit_req_zone $binary_remote_addr zone=static:10m rate=200r/s;

    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json;

    # Main server block
    server {
        listen 80;
        server_name localhost *.run.app;

        # GCP-style security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self' 'unsafe-inline' 'unsafe-eval' data: blob: https:;" always;
        
        # GCP Load Balancer headers
        add_header X-Cloud-Trace-Context $request_id always;
        add_header X-Forwarded-Proto $scheme always;

        # Health check endpoint (similar to GCP health checks)
        location /health {
            access_log off;
            proxy_pass http://timeline_app_gcp/api/data;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Add timeout similar to Cloud Run
            proxy_connect_timeout 5s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
        }

        # API endpoints
        location /api/ {
            limit_req zone=api burst=50 nodelay;
            
            proxy_pass http://timeline_app_gcp;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # GCP-style headers
            proxy_set_header X-Cloud-Trace-Context $request_id;
            
            # Cloud Run timeout simulation
            proxy_connect_timeout 5s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            proxy_cache_bypass $http_upgrade;
        }

        # Static files and main application
        location / {
            limit_req zone=static burst=100 nodelay;
            
            proxy_pass http://timeline_app_gcp;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Cloud-Trace-Context $request_id;
            
            # Cloud Run timeout simulation
            proxy_connect_timeout 5s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            proxy_cache_bypass $http_upgrade;
            
            # Cache static assets (similar to GCP CDN)
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                add_header X-Cache-Status "HIT";
            }
        }

        # Error pages
        error_page 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
            internal;
        }
    }

    # HTTPS server (for production)
    server {
        listen 443 ssl http2;
        server_name localhost *.run.app;

        # SSL configuration (use Let's Encrypt or GCP managed certs in production)
        ssl_certificate /etc/nginx/ssl/cert.pem;
        ssl_certificate_key /etc/nginx/ssl/key.pem;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384;
        ssl_prefer_server_ciphers off;

        # HSTS
        add_header Strict-Transport-Security "max-age=63072000" always;

        # Redirect all HTTP to HTTPS
        return 301 https://$server_name$request_uri;
    }
}
