version: '3.8'

services:
  # Timeline App (GCP Cloud Run simulation)
  timeline-app-gcp:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: timeline-app-gcp
    ports:
      - "8080:3000"  # Cloud Run uses port 8080 by default
    environment:
      - NODE_ENV=development
      - PORT=3000
      - SQLITE_URL=${SQLITE_URL}
      # GCP Cloud Run environment variables
      - K_SERVICE=timeline-app
      - K_REVISION=timeline-app-dev
      - K_CONFIGURATION=timeline-app
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/data"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - gcp-network
    # Simulate Cloud Run resource limits
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
    profiles:
      - gcp

  # Development service with hot reload
  timeline-app-dev-gcp:
    build:
      context: .
      dockerfile: Dockerfile
      target: deps-dev
    container_name: timeline-app-dev-gcp
    ports:
      - "8081:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - SQLITE_URL=${SQLITE_URL}
      - K_SERVICE=timeline-app-dev
      - K_REVISION=timeline-app-dev-latest
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    command: ["bun", "--watch", "server.js"]
    restart: unless-stopped
    networks:
      - gcp-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
    profiles:
      - gcp-dev

  # Google Cloud SQL Proxy (for production database)
  cloud-sql-proxy:
    image: gcr.io/cloudsql-docker/gce-proxy:latest
    container_name: cloud-sql-proxy
    command: /cloud_sql_proxy -instances=${GCP_PROJECT_ID}:${GCP_REGION}:${CLOUD_SQL_INSTANCE}=tcp:0.0.0.0:5432
    ports:
      - "5432:5432"
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/config/key.json
    volumes:
      - ${GOOGLE_APPLICATION_CREDENTIALS}:/config/key.json:ro
    networks:
      - gcp-network
    profiles:
      - cloud-sql

  # Load balancer simulation (nginx)
  gcp-load-balancer:
    image: nginx:alpine
    container_name: gcp-load-balancer
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-gcp.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - timeline-app-gcp
    restart: unless-stopped
    networks:
      - gcp-network
    profiles:
      - gcp-lb

  # Monitoring and logging (similar to GCP operations)
  gcp-monitoring:
    image: prom/prometheus:latest
    container_name: gcp-monitoring
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - gcp-network
    profiles:
      - monitoring

  # Log aggregation (similar to Cloud Logging)
  gcp-logging:
    image: grafana/loki:latest
    container_name: gcp-logging
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki-config.yml:/etc/loki/local-config.yaml:ro
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - gcp-network
    profiles:
      - monitoring

networks:
  gcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  gcp-logs:
    driver: local
  prometheus-data:
    driver: local
  loki-data:
    driver: local
