name: Release

on:
  # push:
  #   tags:
  #     - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  # Create GitHub Release
  release:
    name: 🚀 Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile
        
      - name: 🔨 Build release artifacts
        run: |
          mkdir -p release
          cp -r public release/
          cp server.js release/
          cp package.json release/
          cp bun.lock release/
          cp README.md release/
          cp .env.example release/
          cp docker-compose.yml release/
          cp Dockerfile release/
          cp deploy.sh release/
          
      - name: 📦 Create release archive
        run: |
          tar -czf timeline-app-${{ inputs.version || github.ref_name }}.tar.gz -C release .
          zip -r timeline-app-${{ inputs.version || github.ref_name }}.zip release/
          
      - name: 📝 Generate changelog
        id: changelog
        run: |
          VERSION="${{ inputs.version || github.ref_name }}"
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "## What's Changed" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s (%h)" $(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "HEAD~10")..HEAD >> $GITHUB_OUTPUT || echo "- Initial release" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: 🎯 Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ inputs.version || github.ref_name }}
          name: Timeline App ${{ inputs.version || github.ref_name }}
          body: |
            # Timeline App ${{ inputs.version || github.ref_name }} 🎉
            
            ${{ steps.changelog.outputs.CHANGELOG }}
            
            ## 📦 Installation
            
            ### Docker (Recommended)
            ```bash
            docker pull ghcr.io/${{ github.repository }}:${{ inputs.version || github.ref_name }}
            ```
            
            ### Manual Installation
            1. Download and extract the archive
            2. Copy `.env.example` to `.env` and configure
            3. Run `bun install`
            4. Start with `bun start`
            
            ## 🔧 Deployment
            
            Use the included `deploy.sh` script for automated deployment:
            ```bash
            chmod +x deploy.sh
            ./deploy.sh deploy
            ```
            
            ## 📚 Documentation
            
            See [README.md](https://github.com/${{ github.repository }}/blob/master/README.md) for complete documentation.
          draft: false
          prerelease: false
          files: |
            timeline-app-${{ inputs.version || github.ref_name }}.tar.gz
            timeline-app-${{ inputs.version || github.ref_name }}.zip
          
      - name: 📤 Upload artifacts complete
        run: echo "Release artifacts uploaded successfully"

  # Build and push Docker image for release
  docker-release:
    name: 🐳 Docker Release
    runs-on: ubuntu-latest
    needs: release
    permissions:
      contents: read
      packages: write
      
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name:  Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest
            
      - name: 🔨 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          
  # Notify about release
  notify:
    name: 📢 Notify Release
    runs-on: ubuntu-latest
    needs: [release, docker-release]
    if: always()
    
    steps:
      - name: 📢 Notification
        run: |
          echo "Timeline App ${{ inputs.version || github.ref_name }} has been released! 🎉"
          echo "Release created successfully"
          # Add your notification logic here (Slack, Discord, email, etc.)
