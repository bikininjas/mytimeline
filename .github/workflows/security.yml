name: Security Scan

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  # schedule:
  #   # Run security scan daily at 2 AM UTC
  #   - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: 🔒 Dependency Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile
        
      - name: 🔍 Run dependency audit
        run: |
          echo "Running dependency security audit..."
          bun audit || echo "Audit completed with findings"
          
      - name: 📊 Generate audit report
        run: |
          echo "Generating detailed audit report..."
          bun audit --json > audit-report.json || true
          
      - name: 📤 Upload audit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-audit-report
          path: audit-report.json
          retention-days: 30

  # CodeQL security analysis
  codeql:
    name: 🔍 CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
        
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔍 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          
      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v3
        
      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Docker security scan
  docker-security:
    name: 🐳 Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔨 Build Docker image
        run: docker build -t timeline-app:security-scan .
        
      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'timeline-app:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Secrets scanning
  secrets-scan:
    name: 🔐 Secrets Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🔍 Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # Security summary
  security-summary:
    name: 📋 Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, codeql, docker-security, secrets-scan]
    if: always()
    
    steps:
      - name: 📋 Create security summary
        run: |
          echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ${{ needs.codeql.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Security | ${{ needs.docker-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets Scan | ${{ needs.secrets-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🛡️ Security Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "- Keep dependencies updated regularly" >> $GITHUB_STEP_SUMMARY
          echo "- Review and address any high/critical vulnerabilities" >> $GITHUB_STEP_SUMMARY
          echo "- Ensure no secrets are committed to the repository" >> $GITHUB_STEP_SUMMARY
          echo "- Use dependabot for automated dependency updates" >> $GITHUB_STEP_SUMMARY
