name: Security Scan

on:
  pull_request:
    branches: [ master ]
    types: [ opened, synchronize, reopened ]

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: 🔒 Dependency Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🏗️ Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          
      - name: 📦 Install dependencies
        run: bun install --frozen-lockfile
        
      - name: 🔍 Run dependency audit
        run: |
          echo "Running dependency security audit..."
          if ! bun audit; then
            echo "::error::Critical security vulnerabilities found in dependencies"
            exit 1
          fi
          
      - name: 📊 Generate audit report
        run: |
          echo "Generating detailed audit report..."
          bun audit --json > audit-report.json || true
          
      - name: 📤 Upload audit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-audit-report
          path: audit-report.json
          retention-days: 30

  # CodeQL security analysis
  codeql:
    name: 🔍 CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      
    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
        
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔍 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          
      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v3
        
      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # Docker security scan
  docker-security:
    name: 🐳 Docker Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 🔨 Build Docker image
        run: docker build -t timeline-app:security-scan .
        
      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'timeline-app:security-scan'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: 📤 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Secrets scanning
  secrets-scan:
    name: 🔐 Secrets Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 🔍 Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # Security summary
  security-summary:
    name: 📋 Security Gate
    runs-on: ubuntu-latest
    needs: [dependency-scan, codeql, docker-security, secrets-scan]
    if: always()
    
    steps:
      - name: 📋 Evaluate security results
        id: security-check
        run: |
          echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ${{ needs.codeql.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Security | ${{ needs.docker-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets Scan | ${{ needs.secrets-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if any critical security scans failed
          if [[ "${{ needs.dependency-scan.result }}" == "failure" || \
                "${{ needs.codeql.result }}" == "failure" || \
                "${{ needs.docker-security.result }}" == "failure" || \
                "${{ needs.secrets-scan.result }}" == "failure" ]]; then
            echo "❌ **Security Gate: FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🚨 Critical Security Issues Found" >> $GITHUB_STEP_SUMMARY
            echo "This pull request cannot be merged until all security issues are resolved." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🛠️ Next Steps" >> $GITHUB_STEP_SUMMARY
            echo "1. Review the failed security scans above" >> $GITHUB_STEP_SUMMARY
            echo "2. Fix any high/critical vulnerabilities" >> $GITHUB_STEP_SUMMARY
            echo "3. Ensure no secrets are committed" >> $GITHUB_STEP_SUMMARY
            echo "4. Update dependencies if needed" >> $GITHUB_STEP_SUMMARY
            echo "5. Re-run this workflow" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ **Security Gate: PASSED**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "All security scans completed successfully. This pull request is approved for merge from a security perspective." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### 🛡️ Security Recommendations" >> $GITHUB_STEP_SUMMARY
            echo "- Keep dependencies updated regularly" >> $GITHUB_STEP_SUMMARY
            echo "- Review and address any medium/low vulnerabilities when possible" >> $GITHUB_STEP_SUMMARY
            echo "- Continue following secure coding practices" >> $GITHUB_STEP_SUMMARY
          fi
